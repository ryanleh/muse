/* automatically generated by rust-bindgen */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 33;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub const PLAINTEXT_MODULUS: u64 = 17592060215297;
pub const POLY_MOD_DEGREE: u64 = 8192;
pub const numThreads: ::std::os::raw::c_int = 4;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Metadata {
    pub slot_count: i32,
    pub pack_num: i32,
    pub chans_per_half: i32,
    pub inp_ct: i32,
    pub out_ct: i32,
    pub image_h: i32,
    pub image_w: i32,
    pub image_size: i32,
    pub inp_chans: i32,
    pub filter_h: i32,
    pub filter_w: i32,
    pub filter_size: i32,
    pub out_chans: i32,
    pub inp_halves: i32,
    pub out_halves: i32,
    pub out_in_last: i32,
    pub inp_in_last: i32,
    pub out_mod: i32,
    pub half_perms: i32,
    pub last_repeats: bool,
    pub repeat_chans: i32,
    pub half_rots: i32,
    pub last_rots: i32,
    pub convs: i32,
    pub stride_h: i32,
    pub stride_w: i32,
    pub output_h: i32,
    pub output_w: i32,
    pub pad_t: i32,
    pub pad_b: i32,
    pub pad_r: i32,
    pub pad_l: i32,
}
#[test]
fn bindgen_test_layout_Metadata() {
    assert_eq!(
        ::std::mem::size_of::<Metadata>(),
        128usize,
        concat!("Size of: ", stringify!(Metadata))
    );
    assert_eq!(
        ::std::mem::align_of::<Metadata>(),
        4usize,
        concat!("Alignment of ", stringify!(Metadata))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Metadata>())).slot_count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Metadata),
            "::",
            stringify!(slot_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Metadata>())).pack_num as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Metadata),
            "::",
            stringify!(pack_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Metadata>())).chans_per_half as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Metadata),
            "::",
            stringify!(chans_per_half)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Metadata>())).inp_ct as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Metadata),
            "::",
            stringify!(inp_ct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Metadata>())).out_ct as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Metadata),
            "::",
            stringify!(out_ct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Metadata>())).image_h as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Metadata),
            "::",
            stringify!(image_h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Metadata>())).image_w as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Metadata),
            "::",
            stringify!(image_w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Metadata>())).image_size as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Metadata),
            "::",
            stringify!(image_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Metadata>())).inp_chans as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Metadata),
            "::",
            stringify!(inp_chans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Metadata>())).filter_h as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Metadata),
            "::",
            stringify!(filter_h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Metadata>())).filter_w as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Metadata),
            "::",
            stringify!(filter_w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Metadata>())).filter_size as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(Metadata),
            "::",
            stringify!(filter_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Metadata>())).out_chans as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Metadata),
            "::",
            stringify!(out_chans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Metadata>())).inp_halves as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(Metadata),
            "::",
            stringify!(inp_halves)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Metadata>())).out_halves as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Metadata),
            "::",
            stringify!(out_halves)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Metadata>())).out_in_last as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(Metadata),
            "::",
            stringify!(out_in_last)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Metadata>())).inp_in_last as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Metadata),
            "::",
            stringify!(inp_in_last)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Metadata>())).out_mod as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(Metadata),
            "::",
            stringify!(out_mod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Metadata>())).half_perms as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Metadata),
            "::",
            stringify!(half_perms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Metadata>())).last_repeats as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(Metadata),
            "::",
            stringify!(last_repeats)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Metadata>())).repeat_chans as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Metadata),
            "::",
            stringify!(repeat_chans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Metadata>())).half_rots as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(Metadata),
            "::",
            stringify!(half_rots)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Metadata>())).last_rots as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Metadata),
            "::",
            stringify!(last_rots)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Metadata>())).convs as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(Metadata),
            "::",
            stringify!(convs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Metadata>())).stride_h as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Metadata),
            "::",
            stringify!(stride_h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Metadata>())).stride_w as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(Metadata),
            "::",
            stringify!(stride_w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Metadata>())).output_h as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Metadata),
            "::",
            stringify!(output_h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Metadata>())).output_w as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(Metadata),
            "::",
            stringify!(output_w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Metadata>())).pad_t as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Metadata),
            "::",
            stringify!(pad_t)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Metadata>())).pad_b as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(Metadata),
            "::",
            stringify!(pad_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Metadata>())).pad_r as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Metadata),
            "::",
            stringify!(pad_r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Metadata>())).pad_l as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(Metadata),
            "::",
            stringify!(pad_l)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct ClientFHE {
    pub context: *mut ::std::os::raw::c_void,
    pub encoder: *mut ::std::os::raw::c_void,
    pub encryptor: *mut ::std::os::raw::c_void,
    pub evaluator: *mut ::std::os::raw::c_void,
    pub decryptor: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ClientFHE() {
    assert_eq!(
        ::std::mem::size_of::<ClientFHE>(),
        40usize,
        concat!("Size of: ", stringify!(ClientFHE))
    );
    assert_eq!(
        ::std::mem::align_of::<ClientFHE>(),
        8usize,
        concat!("Alignment of ", stringify!(ClientFHE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ClientFHE>())).context as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ClientFHE),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ClientFHE>())).encoder as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ClientFHE),
            "::",
            stringify!(encoder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ClientFHE>())).encryptor as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ClientFHE),
            "::",
            stringify!(encryptor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ClientFHE>())).evaluator as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ClientFHE),
            "::",
            stringify!(evaluator)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ClientFHE>())).decryptor as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ClientFHE),
            "::",
            stringify!(decryptor)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct ServerFHE {
    pub context: *mut ::std::os::raw::c_void,
    pub encoder: *mut ::std::os::raw::c_void,
    pub encryptor: *mut ::std::os::raw::c_void,
    pub evaluator: *mut ::std::os::raw::c_void,
    pub gal_keys: *mut ::std::os::raw::c_void,
    pub relin_keys: *mut ::std::os::raw::c_void,
    pub zero: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ServerFHE() {
    assert_eq!(
        ::std::mem::size_of::<ServerFHE>(),
        56usize,
        concat!("Size of: ", stringify!(ServerFHE))
    );
    assert_eq!(
        ::std::mem::align_of::<ServerFHE>(),
        8usize,
        concat!("Alignment of ", stringify!(ServerFHE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ServerFHE>())).context as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ServerFHE),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ServerFHE>())).encoder as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ServerFHE),
            "::",
            stringify!(encoder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ServerFHE>())).encryptor as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ServerFHE),
            "::",
            stringify!(encryptor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ServerFHE>())).evaluator as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ServerFHE),
            "::",
            stringify!(evaluator)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ServerFHE>())).gal_keys as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ServerFHE),
            "::",
            stringify!(gal_keys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ServerFHE>())).relin_keys as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ServerFHE),
            "::",
            stringify!(relin_keys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ServerFHE>())).zero as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ServerFHE),
            "::",
            stringify!(zero)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SerialCT {
    pub inner: *mut ::std::os::raw::c_char,
    pub size: u64,
}
#[test]
fn bindgen_test_layout_SerialCT() {
    assert_eq!(
        ::std::mem::size_of::<SerialCT>(),
        16usize,
        concat!("Size of: ", stringify!(SerialCT))
    );
    assert_eq!(
        ::std::mem::align_of::<SerialCT>(),
        8usize,
        concat!("Alignment of ", stringify!(SerialCT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SerialCT>())).inner as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SerialCT),
            "::",
            stringify!(inner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SerialCT>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SerialCT),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ServerShares {
    pub linear: *mut *mut ::std::os::raw::c_char,
    pub linear_mac: *mut *mut ::std::os::raw::c_char,
    pub r_mac: *mut *mut ::std::os::raw::c_char,
    pub linear_ct: SerialCT,
    pub linear_mac_ct: SerialCT,
    pub r_mac_ct: SerialCT,
    pub mac_key_a: *mut ::std::os::raw::c_char,
    pub mac_key_b: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ServerShares() {
    assert_eq!(
        ::std::mem::size_of::<ServerShares>(),
        88usize,
        concat!("Size of: ", stringify!(ServerShares))
    );
    assert_eq!(
        ::std::mem::align_of::<ServerShares>(),
        8usize,
        concat!("Alignment of ", stringify!(ServerShares))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ServerShares>())).linear as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ServerShares),
            "::",
            stringify!(linear)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ServerShares>())).linear_mac as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ServerShares),
            "::",
            stringify!(linear_mac)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ServerShares>())).r_mac as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ServerShares),
            "::",
            stringify!(r_mac)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ServerShares>())).linear_ct as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ServerShares),
            "::",
            stringify!(linear_ct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ServerShares>())).linear_mac_ct as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ServerShares),
            "::",
            stringify!(linear_mac_ct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ServerShares>())).r_mac_ct as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ServerShares),
            "::",
            stringify!(r_mac_ct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ServerShares>())).mac_key_a as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ServerShares),
            "::",
            stringify!(mac_key_a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ServerShares>())).mac_key_b as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ServerShares),
            "::",
            stringify!(mac_key_b)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ClientShares {
    pub input_ct: SerialCT,
    pub linear_ct: SerialCT,
    pub linear_mac_ct: SerialCT,
    pub r_mac_ct: SerialCT,
    pub linear: *mut *mut u64,
    pub linear_mac: *mut *mut u64,
    pub r_mac: *mut *mut u64,
}
#[test]
fn bindgen_test_layout_ClientShares() {
    assert_eq!(
        ::std::mem::size_of::<ClientShares>(),
        88usize,
        concat!("Size of: ", stringify!(ClientShares))
    );
    assert_eq!(
        ::std::mem::align_of::<ClientShares>(),
        8usize,
        concat!("Alignment of ", stringify!(ClientShares))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ClientShares>())).input_ct as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ClientShares),
            "::",
            stringify!(input_ct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ClientShares>())).linear_ct as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ClientShares),
            "::",
            stringify!(linear_ct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ClientShares>())).linear_mac_ct as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ClientShares),
            "::",
            stringify!(linear_mac_ct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ClientShares>())).r_mac_ct as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ClientShares),
            "::",
            stringify!(r_mac_ct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ClientShares>())).linear as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ClientShares),
            "::",
            stringify!(linear)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ClientShares>())).linear_mac as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ClientShares),
            "::",
            stringify!(linear_mac)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ClientShares>())).r_mac as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ClientShares),
            "::",
            stringify!(r_mac)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ServerTriples {
    pub num: u32,
    pub vec_len: u64,
    pub a_rand: *mut *mut ::std::os::raw::c_char,
    pub b_rand: *mut *mut ::std::os::raw::c_char,
    pub c_rand: *mut *mut ::std::os::raw::c_char,
    pub a_share: *mut *mut ::std::os::raw::c_char,
    pub b_share: *mut *mut ::std::os::raw::c_char,
    pub c_share: *mut *mut ::std::os::raw::c_char,
    pub a_mac_share: *mut *mut ::std::os::raw::c_char,
    pub b_mac_share: *mut *mut ::std::os::raw::c_char,
    pub c_mac_share: *mut *mut ::std::os::raw::c_char,
    pub a_ct: SerialCT,
    pub b_ct: SerialCT,
    pub c_ct: SerialCT,
    pub a_mac_ct: SerialCT,
    pub b_mac_ct: SerialCT,
    pub c_mac_ct: SerialCT,
    pub mac_key: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ServerTriples() {
    assert_eq!(
        ::std::mem::size_of::<ServerTriples>(),
        192usize,
        concat!("Size of: ", stringify!(ServerTriples))
    );
    assert_eq!(
        ::std::mem::align_of::<ServerTriples>(),
        8usize,
        concat!("Alignment of ", stringify!(ServerTriples))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ServerTriples>())).num as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ServerTriples),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ServerTriples>())).vec_len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ServerTriples),
            "::",
            stringify!(vec_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ServerTriples>())).a_rand as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ServerTriples),
            "::",
            stringify!(a_rand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ServerTriples>())).b_rand as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ServerTriples),
            "::",
            stringify!(b_rand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ServerTriples>())).c_rand as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ServerTriples),
            "::",
            stringify!(c_rand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ServerTriples>())).a_share as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ServerTriples),
            "::",
            stringify!(a_share)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ServerTriples>())).b_share as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ServerTriples),
            "::",
            stringify!(b_share)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ServerTriples>())).c_share as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ServerTriples),
            "::",
            stringify!(c_share)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ServerTriples>())).a_mac_share as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ServerTriples),
            "::",
            stringify!(a_mac_share)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ServerTriples>())).b_mac_share as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ServerTriples),
            "::",
            stringify!(b_mac_share)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ServerTriples>())).c_mac_share as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ServerTriples),
            "::",
            stringify!(c_mac_share)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ServerTriples>())).a_ct as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ServerTriples),
            "::",
            stringify!(a_ct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ServerTriples>())).b_ct as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ServerTriples),
            "::",
            stringify!(b_ct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ServerTriples>())).c_ct as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ServerTriples),
            "::",
            stringify!(c_ct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ServerTriples>())).a_mac_ct as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ServerTriples),
            "::",
            stringify!(a_mac_ct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ServerTriples>())).b_mac_ct as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ServerTriples),
            "::",
            stringify!(b_mac_ct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ServerTriples>())).c_mac_ct as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ServerTriples),
            "::",
            stringify!(c_mac_ct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ServerTriples>())).mac_key as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ServerTriples),
            "::",
            stringify!(mac_key)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ClientTriples {
    pub num: u32,
    pub vec_len: u64,
    pub a_ct: SerialCT,
    pub b_ct: SerialCT,
    pub a_share: *mut u64,
    pub b_share: *mut u64,
    pub c_share: *mut u64,
    pub a_mac_share: *mut u64,
    pub b_mac_share: *mut u64,
    pub c_mac_share: *mut u64,
}
#[test]
fn bindgen_test_layout_ClientTriples() {
    assert_eq!(
        ::std::mem::size_of::<ClientTriples>(),
        96usize,
        concat!("Size of: ", stringify!(ClientTriples))
    );
    assert_eq!(
        ::std::mem::align_of::<ClientTriples>(),
        8usize,
        concat!("Alignment of ", stringify!(ClientTriples))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ClientTriples>())).num as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ClientTriples),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ClientTriples>())).vec_len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ClientTriples),
            "::",
            stringify!(vec_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ClientTriples>())).a_ct as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ClientTriples),
            "::",
            stringify!(a_ct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ClientTriples>())).b_ct as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ClientTriples),
            "::",
            stringify!(b_ct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ClientTriples>())).a_share as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ClientTriples),
            "::",
            stringify!(a_share)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ClientTriples>())).b_share as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ClientTriples),
            "::",
            stringify!(b_share)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ClientTriples>())).c_share as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ClientTriples),
            "::",
            stringify!(c_share)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ClientTriples>())).a_mac_share as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ClientTriples),
            "::",
            stringify!(a_mac_share)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ClientTriples>())).b_mac_share as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ClientTriples),
            "::",
            stringify!(b_mac_share)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ClientTriples>())).c_mac_share as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ClientTriples),
            "::",
            stringify!(c_mac_share)
        )
    );
}
extern "C" {
    pub fn client_keygen(key_share: *mut SerialCT) -> ClientFHE;
}
extern "C" {
    pub fn server_keygen(key_share: SerialCT) -> ServerFHE;
}
extern "C" {
    pub fn conv_metadata(
        batch_encoder: *mut ::std::os::raw::c_void,
        image_h: i32,
        image_w: i32,
        filter_h: i32,
        filter_w: i32,
        inp_chans: i32,
        out_chans: i32,
        stride_h: i32,
        stride_w: i32,
        pad_valid: bool,
    ) -> Metadata;
}
extern "C" {
    pub fn fc_metadata(
        batch_encoder: *mut ::std::os::raw::c_void,
        vector_len: i32,
        matrix_h: i32,
    ) -> Metadata;
}
extern "C" {
    pub fn encrypt_vec(cfhe: *const ClientFHE, vec: *const u64, vec_size: u64) -> SerialCT;
}
extern "C" {
    pub fn decrypt_vec(cfhe: *const ClientFHE, ct: *mut SerialCT, size: u64) -> *mut u64;
}
extern "C" {
    pub fn server_mac_ct(
        sfhe: *const ServerFHE,
        ct: *mut SerialCT,
        mac_share: *const u64,
        size: u64,
        mac_key: u64,
    ) -> SerialCT;
}
extern "C" {
    pub fn client_input_auth(
        sfhe: *const ServerFHE,
        ct: *mut SerialCT,
        shares: *const u64,
        rand: *const u64,
        size: u64,
    ) -> SerialCT;
}
extern "C" {
    pub fn client_conv_preprocess(
        cfhe: *const ClientFHE,
        data: *const Metadata,
        image: *const *const u64,
    ) -> ClientShares;
}
extern "C" {
    pub fn server_conv_preprocess(
        sfhe: *const ServerFHE,
        data: *const Metadata,
        filters: *const *const *const u64,
    ) -> *mut *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn server_conv_preprocess_shares(
        sfhe: *const ServerFHE,
        data: *const Metadata,
        linear_share: *const *const u64,
        linear_mac_share: *const *const u64,
        r_mac_share: *const *const u64,
        mac_key_a: u64,
        mac_key_b: u64,
    ) -> ServerShares;
}
extern "C" {
    pub fn client_fc_preprocess(
        cfhe: *const ClientFHE,
        data: *const Metadata,
        vector: *const u64,
    ) -> ClientShares;
}
extern "C" {
    pub fn server_fc_preprocess(
        sfhe: *const ServerFHE,
        data: *const Metadata,
        matrix: *const *const u64,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn server_fc_preprocess_shares(
        sfhe: *const ServerFHE,
        data: *const Metadata,
        linear_share: *const u64,
        linear_mac_share: *const u64,
        r_mac_share: *const u64,
        mac_key_a: u64,
        mac_key_b: u64,
    ) -> ServerShares;
}
extern "C" {
    pub fn server_triples_preprocess(
        sfhe: *const ServerFHE,
        num_triples: u32,
        a_rand: *const u64,
        b_rand: *const u64,
        c_rand: *const u64,
        a_share: *const u64,
        b_share: *const u64,
        c_share: *const u64,
        a_mac_share: *const u64,
        b_mac_share: *const u64,
        c_mac_share: *const u64,
        mac_key: u64,
    ) -> ServerTriples;
}
extern "C" {
    pub fn server_rand_preprocess(
        sfhe: *const ServerFHE,
        num_rand: u32,
        rand: *const u64,
        share: *const u64,
        mac_share: *const u64,
        mac_key: u64,
    ) -> ServerTriples;
}
extern "C" {
    pub fn client_triples_preprocess(
        cfhe: *const ClientFHE,
        num_triples: u32,
        a_rand: *const u64,
        b_rand: *const u64,
    ) -> ClientTriples;
}
extern "C" {
    pub fn client_rand_preprocess(
        cfhe: *const ClientFHE,
        num_rand: u32,
        rand: *const u64,
    ) -> ClientTriples;
}
extern "C" {
    pub fn fc_preprocess_noise(
        sfhe: *const ServerFHE,
        data: *const Metadata,
        secret_share: *const u64,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn server_conv_online(
        sfhe: *const ServerFHE,
        data: *const Metadata,
        ciphertext: SerialCT,
        masks: *mut *mut *mut *mut ::std::os::raw::c_char,
        shares: *mut ServerShares,
    );
}
extern "C" {
    pub fn server_fc_online(
        sfhe: *const ServerFHE,
        data: *const Metadata,
        ciphertext: SerialCT,
        matrix: *mut *mut ::std::os::raw::c_char,
        shares: *mut ServerShares,
    );
}
extern "C" {
    pub fn server_triples_online(
        sfhe: *const ServerFHE,
        client_a: SerialCT,
        client_b: SerialCT,
        shares: *mut ServerTriples,
    );
}
extern "C" {
    pub fn server_rand_online(
        sfhe: *const ServerFHE,
        client_r: SerialCT,
        shares: *mut ServerTriples,
    );
}
extern "C" {
    pub fn client_conv_decrypt(
        cfhe: *const ClientFHE,
        data: *const Metadata,
        shares: *mut ClientShares,
    );
}
extern "C" {
    pub fn client_fc_decrypt(
        cfhe: *const ClientFHE,
        data: *const Metadata,
        shares: *mut ClientShares,
    );
}
extern "C" {
    pub fn client_triples_decrypt(
        cfhe: *const ClientFHE,
        a: SerialCT,
        b: SerialCT,
        c: SerialCT,
        a_mac: SerialCT,
        b_mac: SerialCT,
        c_mac: SerialCT,
        shares: *mut ClientTriples,
    );
}
extern "C" {
    pub fn client_rand_decrypt(
        cfhe: *const ClientFHE,
        share: SerialCT,
        mac_share: SerialCT,
        shares: *mut ClientTriples,
    );
}
extern "C" {
    pub fn client_free_keys(cfhe: *const ClientFHE);
}
extern "C" {
    pub fn server_free_keys(sfhe: *const ServerFHE);
}
extern "C" {
    pub fn free_ct(ct: *mut SerialCT);
}
extern "C" {
    pub fn client_conv_free(data: *const Metadata, shares: *mut ClientShares);
}
extern "C" {
    pub fn server_conv_free(
        data: *const Metadata,
        masks: *mut *mut *mut *mut ::std::os::raw::c_char,
        shares: *mut ServerShares,
    );
}
extern "C" {
    pub fn client_fc_free(shares: *mut ClientShares);
}
extern "C" {
    pub fn server_fc_free(
        data: *const Metadata,
        enc_matrix: *mut *mut ::std::os::raw::c_char,
        shares: *mut ServerShares,
    );
}
extern "C" {
    pub fn client_triples_free(shares: *mut ClientTriples);
}
extern "C" {
    pub fn server_triples_free(shares: *mut ServerTriples);
}
extern "C" {
    pub fn client_rand_free(shares: *mut ClientTriples);
}
extern "C" {
    pub fn server_rand_free(shares: *mut ServerTriples);
}
